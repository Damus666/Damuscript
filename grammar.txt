statements: statement (0 or more)

statement: expression | return | if | for | while | repeat | "stop" | "skip" | use

use: "use" NAME

if: "if" expression { statements } "else"? statement

for: "for" NAME "in" expression { statements }

while: "while" expression { statements }

repeat: "repeat" NAME = expression ("to" expression)? ("step" expression)? { statements }

return: "ret" expression

expression: logic_expression ("if" expression "else" expression)?

logic_expression: not_expression | & ? not_expression

not_expression: ! bool_expression | bool_expression

bool_expression: arith_expression == > < >= <= arith_expression

arith_expression: term + - term

term: extra_factor * / ^ extra_factor

extra_factor: factor |
              factor . NAME (1 or more)
              factor . NAME = expression
              factor [ expression ] (1 or more)
              factor [ expression ] = expression
              factor ( expression,... ) (1 or more)

factor : INT|FLOAT|STRING |
         [ expression,... ] |
         [ "for" NAME "in" expression: expression] |
         { NAME = expression; ... } |
         fun NAME (maybe) (NAME, ...) { statements } |
         ( expression ) |
         NAME |
         NAME = expression |
         - + expression
